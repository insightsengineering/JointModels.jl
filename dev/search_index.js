var documenterSearchIndex = {"docs":
[{"location":"HazardBasedDistribution/#Hazard-Based-Distributions","page":"Hazard Based Distributions","title":"Hazard Based Distributions","text":"","category":"section"},{"location":"HazardBasedDistribution/","page":"Hazard Based Distributions","title":"Hazard Based Distributions","text":"Abstract type describing a distribution based on the hazard function.","category":"page"},{"location":"HazardBasedDistribution/","page":"Hazard Based Distributions","title":"Hazard Based Distributions","text":"JointModels.HazardBasedDistribution","category":"page"},{"location":"HazardBasedDistribution/#JointModels.HazardBasedDistribution","page":"Hazard Based Distributions","title":"JointModels.HazardBasedDistribution","text":"HazardBasedDistribution <: ContinuousUnivariateDistribution\n\nHazardBasedDistribution is a type that builds a distribution based  on a hazard function.\n\nTo use this type to formulate a distribution yourself: implement a struct and the hazard function.\n\nstruct LogLogistic <: HazardBasedDistribution\n    α::Real\n    β::Real\nend\n\nfunction JointModels.hazard(dist::LogLogistic, t::Real)\n    α, β  = dist.α, dist.β\n    return ((β / α) * (t / α) ^ (β - 1)) / (1 + (t / α) ^ β)\nend\n\nHazardBasedDistribution implements numeric integration to calculate the  cumulative hazard and builds a distribution based it. To generate samples it solves an ODE and applies inverse transform sampling.\n\n\n\n\n\n","category":"type"},{"location":"HazardBasedDistribution/","page":"Hazard Based Distributions","title":"Hazard Based Distributions","text":"The functionalities implemented for HazardBasedDistribution.","category":"page"},{"location":"HazardBasedDistribution/","page":"Hazard Based Distributions","title":"Hazard Based Distributions","text":"JointModels.support(dist::HazardBasedDistribution)\nJointModels.hazard(dist::HazardBasedDistribution, t::Real)\nJointModels.cumulative_hazard(dist::HazardBasedDistribution, t::Real)\nBase.rand(rng::AbstractRNG, dist::HazardBasedDistribution)\nDistributions.ccdf(dist::HazardBasedDistribution, t::Real)\nDistributions.logpdf(dist::HazardBasedDistribution, t::Real)\nDistributions.pdf(dist::HazardBasedDistribution, t::Real)","category":"page"},{"location":"HazardBasedDistribution/#JointModels.support-Tuple{HazardBasedDistribution}","page":"Hazard Based Distributions","title":"JointModels.support","text":"This function represents the numeric support of the distribution and return a tuple (float_start::Float, float_stop::Float). The default value is: (1e-4, 10_000). Note that some distributions are not defined at 0 i.e. Weibull with shape parameter less than 1.\n\nThe pdf and hazard are 0 before float_start and the numeric integration to calculate the integral over the haazrd in cumulative_hazard starts at beginning. When sampling with rand an ODE is solved over the support.\n\nUsage\n\nYou should adjust the support according to your data\n\nJointModels.support(dist:HazardBasedDistribution) = (-100, 1000)\n\n\n\n\n\n","category":"method"},{"location":"HazardBasedDistribution/#JointModels.hazard-Tuple{HazardBasedDistribution, Real}","page":"Hazard Based Distributions","title":"JointModels.hazard","text":"represents h(t) needs to be implemented for any struct that subtypes HazardBasedDistribution\n\n\n\n\n\n","category":"method"},{"location":"HazardBasedDistribution/#JointModels.cumulative_hazard-Tuple{HazardBasedDistribution, Real}","page":"Hazard Based Distributions","title":"JointModels.cumulative_hazard","text":"calculates H(t) = int_0^t h(u)  du numerically with a  Gauss-Konrad procedure.\n\n\n\n\n\n","category":"method"},{"location":"HazardBasedDistribution/#Base.rand-Tuple{AbstractRNG, HazardBasedDistribution}","page":"Hazard Based Distributions","title":"Base.rand","text":"Generate a random sample t sim textdist via inverse transform  sampling.\n\n\n\n\n\n","category":"method"},{"location":"HazardBasedDistribution/#Distributions.ccdf-Tuple{HazardBasedDistribution, Real}","page":"Hazard Based Distributions","title":"Distributions.ccdf","text":"Calculation of the ccdf / survival function at time t based on the  cumulative hazard\n\nS(t) = exp(-H(t)) = exp(-int h(u) du)\n\n\n\n\n\n","category":"method"},{"location":"HazardBasedDistribution/#Distributions.logpdf-Tuple{HazardBasedDistribution, Real}","page":"Hazard Based Distributions","title":"Distributions.logpdf","text":"Calculation of the log pdf function at time t based on the cumulative hazard \n\nlog (f(t)) = log(h(t)cdot S(t)) = log( h(t)) - H(t)\n\n\n\n\n\n","category":"method"},{"location":"HazardBasedDistribution/#Distributions.pdf-Tuple{HazardBasedDistribution, Real}","page":"Hazard Based Distributions","title":"Distributions.pdf","text":"Calculation of the pdf function at time t based on the log pdf.\n\n\n\n\n\n","category":"method"},{"location":"GeneralJointModel/#General-Joint-Model","page":"General Joint Model","title":"General Joint Model","text":"","category":"section"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"This struct implements a general family of joint models. Let h_0mathbbR tomathbbR_+ be a baseline hazard function. Suppose we have kin mathbbN longitudinal models m_1dots m_ksubset textFunctions mathbbRtomathbbR as well as k links l_1dots l_ksubset textOperators on functions mathbbRtomathbbR. Let M mathbbR to mathbbR^k and LmathbbR^k to mathbbR^k be the multidimensional vector versions","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"beginalign*\n    M(t) mapsto beginpmatrix\n    m_1(t)  m_2(t)  dots  m_k(t)\nendpmatrix text \n    Lbeginpmatrix\n    mu_1  mu_2  dots  mu_k\nendpmatrix mapsto beginpmatrix\n    l_1(mu_1)  l_2(mu_2)  dots  l_k(mu_k)\nendpmatrix text and  L(M(t)) =beginpmatrix\n    l_1(m_1(t))  l_2(m_2(t))  dots  l_k(m_k(t))\nendpmatrix\nendalign*","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"In code L(M(t)) corresponds to an array of unary functions (one argument). You are responsible for choosing the longitudinal model and link and finally the application of the link to the longitudinal model. For the link model vector L(M(t)) we consider a coefficient vector gamma in mathbbR^k. Then we can formulate a hazard as follows","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"h(t) = h_0(t) expleft(sum_jin kgamma_j l_j(m_j(t))  right) = h_0(t) exp(gamma cdot L(M(t)))","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"Additionally we consider covariates xin mathbbR^l linmathbbN and coefficients beta in mathbbR^l. This results in the hazard","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"beginalign*\nh(t) = h_0(t) expleft(gamma cdot L(M(t)) + beta cdot xright)\n     = h_0(t) expleft(sum_jin kgamma_j l_j(m_j(t)) + sum_jin l x_j  beta_j  right)\nendalign*","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"which is implemented in the general joint model:","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"JointModels.GeneralJointModel","category":"page"},{"location":"GeneralJointModel/#JointModels.GeneralJointModel","page":"General Joint Model","title":"JointModels.GeneralJointModel","text":"GeneralJointModel <: HazardBasedDistribution <: ContinuousUnivariateDistribution\n\nGeneralJointModel is based on the hazard formulation:\n\nh_i(t) = h_0(t) expleft(gamma cdot L(M_i (t)) + beta cdot x right)\n\nwhere h_0 mathbbR to mathbbR_+ is the baseline hazard function. The term L(M(t)) mathbbR to mathbbR^k kinmathbbN represents the link to the longitudinal model(s)  and gammainmathbbR^k are the link coefficients. Lastly x inmathbbR^l linmathbbN the covariates with coefficients betainmathbbR^l.\n\nFields:\n\nh₀::Function: a positive valued function in time representing the baseline hazard\nγ::Vector{Real}: coefficients for links to longitudinal models, should have the same length as link_m\nlink_m::Vector{Function}: unary functions (one argument) in time representing the link to a single or multiple longitudinal models\nβ::Vector{Real}: coefficients for covariates, should have the same length as x\nx::Vector{Real}: covariates\n\nExample\n\nThere are constructors for calling GeneralJointModel without covariates and for single longitudinal models without the need for arrays. For example:\n\nusing JointModels\n\nGeneralJointModel(identity, 0.01, identity, 0.02, 3)\n# corresponds to hazard: identity(t) * exp(0.01 * identity(t) +  0.02 * 3) \nGeneralJointModel(identity, 0.01, identity)\n# corresponds to hazard: identity(t) * exp(0.01 * identity(t))\nGeneralJointModel(identity,\n                    [0.01,-0.02,0.03],\n                    [x -> sqrt(x), x -> sin(x)+1, x -> cos(x)^2],\n                    [2, 0.3],\n                    [ 0, sqrt(2)])\n# corresponds to hazard: identity(t) * exp(0.01 * sqrt(t) - 0.02 * (sin(t)+1) + 0.03 * cos(t)^2  + 2 * 0 + 0.3 * sqrt(2))\n\n\n\n\n\n","category":"type"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"Its hazard is calculated by:","category":"page"},{"location":"GeneralJointModel/","page":"General Joint Model","title":"General Joint Model","text":"JointModels.hazard(jm::GeneralJointModel, t::Real)","category":"page"},{"location":"GeneralJointModel/#JointModels.hazard-Tuple{GeneralJointModel, Real}","page":"General Joint Model","title":"JointModels.hazard","text":"The hazard for GeneralJointModel calculates the hazard according to the formulation h(t) = h_0(t) expleft(gamma cdot L(M(t)) + beta cdot x right) described in the documentation of GeneralJointModel\n\nExample\n\nmy_joint_model = GeneralJointModel(identity, 0.01, identity) hazard(my_joint_model, 10)`\n\n\n\n\n\n","category":"method"},{"location":"FirstExample/#First-Example","page":"First Example","title":"First Example","text":"","category":"section"},{"location":"FirstExample/#Joint-Models","page":"First Example","title":"Joint Models","text":"","category":"section"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"The struct GeneralJointModel allows you to implement joint models. Let us consider a simple example. First we describe a model and generate data. Assume a non-linear mixed effects model for individual i in 12dots100","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"m_i(t) = t^a_i * (1+cos(b * t)^2)","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"where a_i is a mixed effects parameter for each individual and b a population parameter. Next a Weibull survival model with baseline hazard","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"h_0(t) = alphatheta ( t  theta)^alpha -1","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"with the two parameters alpha and theta. From these we can build a joint model using the identity link id x mapsto x and link coefficient γ.","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"h_i(t) = h_0(t) exp(gamma * id(m_i(t))) = alphatheta ( t  theta)^alpha -1 * exp(gamma * t^a_i * (1+cos(b * t)^2))","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"In code:","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"parametric_m_i(t, i, a, b) = t^(a[i]) * (1+cos(b * t)^2)\nparametric_h_0(t, α, θ) = α/θ *(t/θ)^(1-α)\nparametric_joint_model(i, a, b, γ, α, θ) = GeneralJointModel(\n    t -> parametric_h_0(t, α, θ),   # baseline hazard function\n    γ,                              # link coefficient\n    t -> parametric_m_i(t, i, a, b)            # link function\n)","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"To simulate data for 100 individuals we assume a_i sim Beta(210) and b = 3 γ = 002 alpha = 12 theta = 50:","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"using Distributions\nusing JointModels\nusing Random\nRandom.seed!(222)\nn = 100 # number of individuals\na = rand(Product(fill(Beta(10,2), n)))\nb = 0.2\nγ = 0.05\nα = 0.6\nθ = 70\n\n\nm(i) = t -> parametric_m_i(t, i, a, b)\nh_0(t) = parametric_h_0(t, α, θ)\njoint_models = [GeneralJointModel(h_0, γ, m(i)) for i in 1:n] # joint models for all individuals","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"Inspecting individual 1 and 2.","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"using Plots\nr = range(0,50,100)\n\nlm = plot(r, m(1), title=\"Longitudinal process\", label = \"Individual 1\", color = :blue)\nplot!(lm, r, m(2), label = \"Individual 2\", color = :green)","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"(Image: )","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"sm = plot(r, t-> ccdf(joint_models[1], t), label = \"Survival individual 1\", title=\"Joint survival process\", color = :blue)\nplot!(sm, r, t-> ccdf(joint_models[2], t), label = \"Survival individual 2\", color = :green)\nplot!(sm, r, t-> ccdf(Weibull(1.2,100),t), label = \"Baseline survival\", color = :black)","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"(Image: )","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"To simulate longitudinal measurements y_ij for individual i at time t_ij we assume a multiplicative error y_ij sim N(m_i(t_ij) sigma * m_i(t_ij) ) sigma = 015. Simulate 9 longitudinal measurements and survival times for each individual:","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"σ = 0.15\nt_m = range(1,50,9)\nY = [[rand(Normal(m(i)(t_m[j]), σ * m(i)(t_m[j]))) for j in 1:9] for i in 1:n]\nT = [rand(jm) for jm in joint_models]","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"Additionally we assume right-censoring at 50 and no measurements after an event:","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"Δ = T .< 50       # event indicators\nT = min.(T, 50)   # censoring at 50\nindices = [findlast(T[i] .>= t_m) for i in 1:n]\nY = [Y[i][1:indices[i]] for i in 1:n] # prune obs after events\nscatter!(lm, t_m[1:indices[1]], Y[1], label=\"obs individual 1\", color = :blue)\nscatter!(lm, t_m[1:indices[2]], Y[2], label=\"obs individual 2\", color = :green)\nvline!(lm, [T[1]], label=\"Event time ind 1\", color = :blue)\nvline!(lm, [T[2]], label=\"Event time ind 2\", color = :green)","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"(Image: )","category":"page"},{"location":"FirstExample/#Modeling-in-Turing","page":"First Example","title":"Modeling in Turing","text":"","category":"section"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"One application of this module is in bayesian inference frameworks, for example Turing.jl. For this we choose a suitable prior distribution for the parameters and use the framework to sample the posterior. This works based on the numerical estimation of the log probability density function.","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"First the non-linear mixed effects model by itself","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"using Turing\n# for better performance with multidimensional distributions (mixed effects)\nusing ReverseDiff\nTuring.setadbackend(:reversediff)\nTuring.setrdcache(true)\n\n@model function example_longitudinal(Y, t_m)\n    n = length(Y)\n    \n    # longitudianl coef\n    a ~ filldist(Beta(10, 2), n)\n    b ~ Uniform(0.1, 0.3)\n    # multiplicative error\n    σ ~ Exponential(0.2)\n    # model\n    m(i) = t -> parametric_m_i(t, i, a, b)\n    # longitudinal likelihood\n    for i in 1:n\n        n_i = length(Y[i])\n        for j in 1:n_i\n            Y[i][j] ~ Normal(m(i)(t_m[Int(j)]), σ * m(i)(t_m[Int(j)]))\n        end\n    end\nend\n\nlongitudinal_chn = sample(example_longitudinal(Y, t_m), NUTS(), 200)\nposterior_means = summarize(longitudinal_chn)[:,2]\na_hat = posterior_means[1:n]\nb_hat = posterior_means[101]\n","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"Now a two step joint model, where we use the posterior mean of the population and mixed effects from the longitudinal model fitted above:","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"@model function example_two_step(Y, t_m, T, Δ, a, b)\n    n = length(Y)\n    \n    # survival coef\n    α ~ Uniform(0.4,1.2) #0.6\n    θ ~ LogNormal(4,0.2) #70\n    # joint model coef\n    γ ~ Normal(0,0.03)\n    # models\n    m(i) = t -> parametric_m_i(t, i, a, b)\n    h_0(t) = parametric_h_0(t, α, θ)\n    joint_models = [GeneralJointModel(h_0, γ, m(i)) for i in 1:n]\n\n    # survival likelihood\n    for i in 1:n\n        T[i] ~ censored(joint_models[i], upper = 50 + Δ[i]) # if censored at time 50 then upper = 50\n    end\nend\n# using previously sampled posterior for longitudinal process\ntwo_step_chn = sample(example_survival(Y, t_m, T, Δ, a_hat, b_hat), NUTS(), 100)\n","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"Finally a joint model where the posterior of the longitudinal and joint survival model are sampled simultaneously.","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"@model function example_joint_model(Y, t_m, T, Δ)\n    n = length(Y)\n    # longitudinal coef\n    a ~ filldist(Beta(10,2), n)\n    b ~ Uniform(0.1, 0.3)\n    # multiplicative error\n    σ ~ Exponential(0.2)\n    # survival coef\n    α ~ Uniform(0.4,1.2) #0.6\n    θ ~ LogNormal(4,0.2) #70\n    # joint model coef\n    γ ~ Normal(0,0.03)\n    # models\n    m(i) = t -> parametric_m_i(t, i, a, b)\n    h_0(t) = parametric_h_0(t, α, θ)\n    joint_models = [GeneralJointModel(h_0, γ, m(i)) for i in 1:n]\n    # longitudinal likelihood\n    for i in 1:n\n        n_i = length(Y[i])\n        for j in 1:n_i\n            Y[i][j] ~ Normal(m(i)(t_m[Int(j)]), σ * m(i)(t_m[Int(j)]))\n        end\n    end\n    # survival likelihood\n    for i in 1:n\n        T[i] ~ censored(joint_models[i], upper = 50 + Δ[i]) # if censored at time 50 then upper = 50\n    end\nend\n\njoint_model_chn = sample(example_joint_model(Y, t_m, T, Δ), NUTS(), 100)","category":"page"},{"location":"FirstExample/#Link-functions","page":"First Example","title":"Link functions","text":"","category":"section"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"In the example above the identity link was used for simplicity. The julia ecosystem contains suitable options to explore link functions. For example we can use ForwardDiff to take derivatives of numeric julia functions:","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"using ForwardDiff\nf(x) = x^2\nDxf(x) = ForwardDiff.derivative(x ->f(x), x) # first derivative\nDx2f(x) = ForwardDiff.derivative(x ->Dxf(x), x) # second derivative\nplot(f, label = \"f\", title=\"Derivatives\")\nplot!(Dxf, label = \"f'\")\nplot!(Dx2f, label = \"f''\")","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"(Image: )","category":"page"},{"location":"FirstExample/","page":"First Example","title":"First Example","text":"Another interesting module could be DifferentialEquations.jl, which allows to calculate ODEs and PDEs numerically.","category":"page"},{"location":"#JointModels.jl","page":"JointModels.jl","title":"JointModels.jl","text":"","category":"section"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"Documentation for JointModels.jl","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"This package implements joint models in julia. It was designed to support the modeling of joint models with probabilistic programming, for example using the Turing.jl framework.","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"To install:","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"using Pkg\n# needs public listing\n#Pkg.add(\"JointModels\")","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"The GeneralJointModel implements a canonical formulation of a joint models. It based on a joint hazard function h(t) = h_0(t) exp(b cdot L(M(t))) with a baseline hazard h_0 and a link to joint models L(M(t)). For a more detailed explanation see General Joint Models.","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"A simple example: The hazard of the exponential distribution Exp(alpha) is the constant function xmapsto alpha. For the joint longitudinal model we use a simple cosinus function. The joint hazard is then h(t) = \\alpha \\exp(b * cos(t)).","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"Example:","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"constant_alpha(x) = 2\nb = 0.01\nGeneralJointModel(constant, b, cos)","category":"page"},{"location":"","page":"JointModels.jl","title":"JointModels.jl","text":"For the numeric calculation for the distribution a default support (0,10'000) is assumed. In particular the first events happen after 0 and the interval (0,10'000) should contain nearly all of the probability mass of the target distribution. If you have different starting times for events or a time horizon that exceeds 10'000 then you can manually adjust the support, see support in Hazard Based Distribution","category":"page"}]
}
